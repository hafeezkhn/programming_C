-------------------	FILE_MANAGEMENT      -----------------------------------------------

POSIX -> (Portable Operating System Interface)IEEE defined standards Enables software 
portability across operating systems,it defines both system and user-level APIs
glibc -> impliments APIs on GNU/Unix based OS

file -> is data container
file system -> file resides in a filesystem( way of organising the data), fs will be hosted on memory(disk,ram,etc..)
	#partitioning:[[MBR],[PartitionTable],[DiskPartition]]
						     /
			[[BootBlock],[SuperBlock],(InodeBlock),(DataBlocks)]
	#each partition may be raw,or host some file system
	
	*Bootblock:reside on first sector(begenning of fs), bootstarp only 512bytes(wasteing onesector) 
	*superblock:it contains complete info about fs,tells free space ,about datablock
	*inode list: directory entry or file , it provide name,permission,acess.if its link it will provide first link of data blockl

		task1		task2		...	taskn		[user space]
         ----------------------------------------------------------------------
		 | 		  |                       |             [kernel space]
	      [---------------virtual file system(VFS)-------------------]
		|	|	|			|		
	     [minix]  [ext2]  [msdos]                 [proc]
		|	|	|
	     [----Buffer chche----]
		|		|
	      [DD for HDD]    [DD for floppy]                           software
	 ---------|-------------------------------------------------------------
	       [Hard disk]						hardware
	
	*VFS: gives uniform view of fs ,thats the reason you are not worried where fs resides,what type of fs it is
	      you use normal call called open,read,write irrespective of file system.internally navigates to which fs to choose
	*Buffer chache: (see 'top' command) used for performence reasons.some data is chached
	



Note:check, MBR (Dos partition),GPT partition(Uparted),powerfailure fs,ext4 vs fat,diff partition can have its own fs.

(CMD) cat /proc/filesystems

#connect raw pendrive to create diff filesystem on it
(CMD) sudo dmesg
(CMD) sudo mkfs.ext4 /dev/sdb
(CMD) sudo mount /dev/sdb test1 #test1 is directory to mount
(CMD) sudo umount temp1
(CMD) sudo mkfs.vfat /dev/sdb #vfat metadata is created aswell
(CMD) sudo xxd /dev/sdb | less #thats how fat system looks like

#partition table
(CMD) fdisk
(CMD) gparted
#virtual disk
(CMD) dd if=/dev/zero of=test.img bs=1M count=200
(CMD) fdisk test.img # commands -> 'n','p''1'''
(CMD) cd /tmp/;ls;mkdir test
(CMD) mkfs.vfat --offset 4 test.img
(CMD) fdisk test.img #print
(CMD) sudo mount -o loop ,offset=2848 test.img /tmp/test/ 
(CMD) xxd test.img|less
(CMD) mkfs.vfat test.img
(CMD) xxd test.img|less
(CMD) fdixk test.img

#forensic
(CMD) sudo mount test.img /tmp/test
(CMD) cd /temp/test/
(CMD) touch test1.txt test2.txt #type anything
(CMD) sudo umount test
(CMD) xxd test.img |less #scroll down for data 
(CMD) mkfs.vfat test.img #again look disk->xxd 

#to check memory usage (top command)
(CMD) cat /proc/meminfo
(CMD) memstat

-----file ops

